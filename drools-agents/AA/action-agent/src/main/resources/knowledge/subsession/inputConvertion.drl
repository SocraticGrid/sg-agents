package org.socraticgrid.taps.ds.agent;

import org.socraticgrid.taps.aa.log.RulesLoggerHelper;

import org.drools.informer.generator.*;
import org.drools.informer.*;
import org.drools.informer.interaction.*;
import org.drools.mas.action.communication.CommunicationHandlerConfiguration;
import org.drools.mas.action.message.*;
import org.drools.mas.util.MessageContentFactory;
import org.socraticgrid.taps.ds.agent.*;

import org.slf4j.Logger;

global Logger logger;

rule "InteractionTicket Convertion"
when
    $chc: CommunicationHandlerConfiguration()
then
    RulesLoggerHelper.debug(logger, drools, "CommunicationHandlerConfiguration found: {}", $chc);

    InteractionTicket ticket = new InteractionTicket( java.util.UUID.randomUUID().toString(),
                                                      new java.util.ArrayList(),
                                                      $chc );
    
    Interaction ti1 = new Interaction();
    ti1.setType( InteractionTypes.NOTIFICATION );
    ti1.setBodyTemplateIds($chc.getTemplates());
    ti1.setReceivers($chc.getReceivers());
    ti1.setChannels($chc.getChannels());
    ti1.setTimeouts($chc.getTimeouts());


    ticket.getInteractions().add( ti1 );

    RulesLoggerHelper.debug(logger, drools, "new InteractionTicket created: {}", ticket);
    
    insert(ticket);

    retract($chc);
end



rule "DispatchImpl"
salience -200
when
    $ticket : InteractionTicket( $ticketId : id,
                                 $inters : interactions,
                                 $source : source  )
    $convo  : TicketActor( $convoId, $ticketId, $actorId ; )
    accumulate (
                 Alert( ticketId == $ticketId, destination == $actorId,
                        $formId : formId, $body : bodyTemplateId, $channel : channel, $timeout : timeout ),
                 $formIds  : collectList( $formId ),
                 $bodies   : collectList( $body ),
                 $channels : collectList( $channel );
                 $channels.size() > 0
               )
then
    String templateId = (String) $bodies.get(0);

    java.util.LinkedHashMap map = new java.util.LinkedHashMap();
    map.put("refId", $ticketId );
    map.put("conversationId", $convoId );
    
    CommunicationHandlerConfiguration chc = (CommunicationHandlerConfiguration)$source;
    if (chc.getSubjects() != null){
        map.put("subjectAbout", chc.getSubjects().toArray(new String[0]));  
    }

    map.put("sender", chc.getSender() );                 
    map.put("mainRecipients", new String[] { $actorId } );          
    map.put("secondaryRecipients", new String[0] );     
    map.put("hiddenRecipients", new String[0] ); 
    map.put("type", $channels.get(0) );  //ALERT, SMS
    map.put("priority", "High" );
    map.put("deliveryDate", new java.util.Date() );
    map.put("status", "New" );                       
    map.put("source", chc.getSource() );                       
    map.put("originator", chc.getOriginator() );                       
    map.put("templateId", templateId );                       

    //Header and Body are set in "Create ActionContentTemplateContext for deliverMessage Action" rule
    //map.put("header", header );
    //map.put("body", body );
    
    RulesLoggerHelper.debug(logger, drools, "Map: {}", map);

    RulesLoggerHelper.debug(logger, drools, " ******************************* Deliver to '{}': >> '{}' in '{}' using '{}'", $actorId, $formIds, $convo, $channels.get(0) );
    
    insert(MessageContentFactory.newActionContent("deliverMessage", map));

end

rule "Create ActionContentTemplateContext for deliverMessage Action"
when
    $action: Action(
        actionName == "deliverMessage",
        $convoId        : this["conversationId"],
        $ticketId       : this["refId"],
        this["body"]    == null,
        this["header"]  == null
    )
    $ticket : InteractionTicket( id == $ticketId,
                                 $source : source  )
    $rec :   Recipient( messageId == $convoId )
then
    Map args = new HashMap();
    args.put( "recipient", $rec );

    //Add the original template variables that came with the 
    //CommunicationHandlerConfiguration request
    if ($source != null && $source instanceof CommunicationHandlerConfiguration){
        args.putAll(((CommunicationHandlerConfiguration)$source).getTemplateVariables());
    }

    ActionContentTemplateContext $actc = new ActionContentTemplateContext($action, args);
    RulesLoggerHelper.debug(logger, drools, "New ActionContentTemplateContext created: {}", $actc);

    insert($actc);
end
