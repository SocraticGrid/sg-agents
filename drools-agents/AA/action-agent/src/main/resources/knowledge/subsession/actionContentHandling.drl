package org.socraticgrid.taps.ds.agent;


import org.drools.informer.interaction.TemplateBuilder;
import org.drools.mas.body.content.Action;
import org.drools.mas.mappers.MyMapArgsEntryType;
import org.socraticgrid.taps.aa.template.TemplateManager;
import org.socraticgrid.taps.aa.template.TemplateEntry;
import org.socraticgrid.taps.aa.log.RulesLoggerHelper;

import org.slf4j.Logger;

import java.util.Map;
import java.util.HashMap;


global Logger logger;
global TemplateManager templateManager;

rule "Add Patient to template variables"
salience 1
when
    $action: Action( $convoId : this["conversationId"] )
    $context: ActionContentTemplateContext ($variables: variables, variables["patient"] == null)
    $pat :   Patient( messageId == $convoId )
then
    RulesLoggerHelper.info(logger, drools, "Adding patient ({}) to template variables", $pat);
    $variables.put("patient", $pat);
end

rule "Add Provider to template variables"
salience 1
when
    $action: Action( $convoId : this["conversationId"] )
    $context: ActionContentTemplateContext ($variables: variables, variables["provider"] == null)
    $pro :   Provider( messageId == $convoId )
then
    RulesLoggerHelper.info(logger, drools, "Adding provider ({}) to template variables", $pro);
    $variables.put("provider", $pro);
end

rule "Process Action Content"
when
    $action: Action( 
        $templateId : this["templateId"] != null,
        this["title"] == null,
        this["header"] == null,
        this["body"] == null
    )
    $context: ActionContentTemplateContext (action == $action,
                                            $variables: variables)
then
    try{
        //get template data
        TemplateEntry template = templateManager.getTemplate((String)$templateId);
        String title = template.getTitle();
        String header = template.getHeader();
        String body = template.getBody();

        RulesLoggerHelper.trace(logger, drools, "Found template '{}' with title= '{}', header= '{}' and body= '{}'", $templateId, title, header, body);

        RulesLoggerHelper.trace(logger, drools, "Template Variables:");
        for (Map.Entry<String, Object> entry : ((Map<String,Object>)$variables).entrySet()){
            RulesLoggerHelper.trace(logger, drools, "'{}' -> {}", entry.getKey(), entry.getValue());
        }

        //replace title template
        String finalTitle = TemplateBuilder.applyTemplate( (String) title, (Map<String,Object>) $variables );
        finalTitle = finalTitle == null ? "" : finalTitle.replace( "\n", "" );
        RulesLoggerHelper.trace(logger, drools, "Final title= '{}'", finalTitle);

        //replace header template
        String finalHeader = TemplateBuilder.applyTemplate( (String) header, (Map<String,Object>) $variables );
        finalHeader = finalHeader == null ? "" : finalHeader.replace( "\n", "" );
        RulesLoggerHelper.trace(logger, drools, "Final header= '{}'", finalHeader);

        //replace body template
        String finalBody = TemplateBuilder.applyTemplate( (String) body, (Map<String,Object>) $variables );
        finalBody = finalBody == null ? "" : finalBody.replace( "\n", "" );
        RulesLoggerHelper.trace(logger, drools, "Final body= '{}'", finalBody);

        RulesLoggerHelper.debug(logger, drools, "Template '{}' processed. Final Result:\nTitle: {}\nHeader: {}\nBody: {}", $templateId, finalTitle, finalHeader, finalBody );

        //prepare 'title', 'header' and 'body' entries for Action 
        MyMapArgsEntryType titleEntry = new MyMapArgsEntryType();
        titleEntry.setKey("title");
        titleEntry.setValue(finalTitle);

        MyMapArgsEntryType headerEntry = new MyMapArgsEntryType();
        headerEntry.setKey("header");
        headerEntry.setValue(finalHeader);

        MyMapArgsEntryType bodyEntry = new MyMapArgsEntryType();
        bodyEntry.setKey("body");
        bodyEntry.setValue(finalBody);


        //Add 'title', 'header' and 'body' to Action
        modify($action){
            getArgs().add(titleEntry),
            getArgs().add(headerEntry),
            getArgs().add(bodyEntry)
        }
    } catch (Exception e){
        RulesLoggerHelper.error(logger, drools, "Error processing Template '{}'. Retracting Action '{}'", $templateId, $action);
        RulesLoggerHelper.error(logger, drools, "Error:", e);
        retract( $action );
    } finally{
        //we don't need the context anymore
        retract($context); 
    }
end



