/*******************************************************************************
 *
 * Copyright (C) 2012 by Cognitive Medical Systems, Inc (http://www.cognitivemedciine.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
 * use this file except in compliance with the License. You may obtain a copy of 
 * the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed 
 * under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR 
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 ******************************************************************************/
 
 /******************************************************************************
 * Socratic Grid contains components to which third party terms apply. To comply 
 * with these terms, the following notice is provided:
 *
 * TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
 * Copyright (c) 2008, Nationwide Health Information Network (NHIN) Connect. All 
 * rights reserved.
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions are met:
 * 
 * - Redistributions of source code must retain the above copyright notice, this 
 *   list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice, 
 *   this list of conditions and the following disclaimer in the documentation 
 *   and/or other materials provided with the distribution.
 * - Neither the name of the NHIN Connect Project nor the names of its 
 *   contributors may be used to endorse or promote products derived from this 
 *   software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
 * INTERRUPTION HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 * END OF TERMS AND CONDITIONS
 *
 ******************************************************************************/

 package org.socraticgrid.kmr2.simulatorAgent.services;

import org.drools.io.internal.InternalResource;

import org.drools.mas.body.content.Action;
import java.util.List;
import java.util.ArrayList;
import org.drools.mas.util.helper.SessionLocator;
import org.drools.mas.core.helpers.ResponseContent;

import org.socraticgrid.kmr2.simulatorAgent.SimulatorModelMarker;
import planner.ptsd.log.RulesLoggerHelper;

global Logger logger;

declare ModelElement
    modelId             : String    @key
    tags                : ArrayList @key
    name                : String
    shortDescr          : String
    fullDescr           : String
    disease             : String
    modelRunInfo        : PlanningModelRunInfo
end

declare ModelList
    tags                : ArrayList @key
    models              : List
    successStatus       : boolean   = true
    successMessage      : String    = "(ok)"
end

declare PlanningModelRunInfo
    startedSimulations  : int       = 0
    pausedSimulations   : int       = 0
    resultedSimulations : int       = 0
end


query getPlanningModels( String $userId, Object $return )
    $return := ModelList( models != null )
end

rule "Action_Request : getPlanningModels Result"
when
    $s : SessionLocator($sessionId: sessionId, mind == true)
    $a :  Action( actionName == "getPlanningModels",
                  $userId    : this["userId"],
                  $msgId: msgId
                )
    getPlanningModels($userId, $return;)
then
    RulesLoggerHelper.debug(logger, drools, "Delivering Response: {}", $return);
    ResponseContent.deliverResponse($sessionId, $msgId, $return, null, true );
    retract ($a);
end

rule "Action_Request : getPlanningModels Init"
salience 10
when
    $a :  Action( actionName == "getPlanningModels",
                  $userId    : this["userId"]
                )
    not   ModelList( tags == ["Plan"] )
then
    RulesLoggerHelper.debug(logger, drools, "User {} requested 'getPlanningModels' action.", $userId);
    insert( new ModelList( new ArrayList( java.util.Arrays.asList("Plan") ),
            null,
            true,
            "(ok)" )
          );
end



rule "Action_Request : getPlanningModels Clear"
salience -10
when
    $a :  Action( actionName == "getPlanningModels" )
then
    RulesLoggerHelper.debug(logger, drools, "Cleaning 'getPlanningModels' data for Action '{}'", $a);
    retract( $a );
end



rule "Load Model"
salience 10
when
    InternalResource( $id : name, $type : description, $tags : categories  )
then
    RulesLoggerHelper.debug(logger, drools, "InternalResource found:\n\tid -> {}\n\ttype -> {}\n\ttags -> {}", $id, $type, $tags);
    insertLogical( new ModelElement( $id,
                                     new ArrayList($tags),
                                     $type,
                                     $type,
                                     $type,
                                     $type,
                                     new PlanningModelRunInfo() ) );
end



rule "Listing"
no-loop
salience 10
when
    $ml : ModelList( $queryTags : tags )
    $list : List( $num : size ) from accumulate (
        $m : ModelElement( tags.containsAll( $queryTags ) )
        collectList( $m )
    )
then
    RulesLoggerHelper.debug(logger, drools, "Listing Model Elements ({}): {}", $list.size(), $list);
    $ml.setModels( new ArrayList( $list ) );
    update( $ml );
end


