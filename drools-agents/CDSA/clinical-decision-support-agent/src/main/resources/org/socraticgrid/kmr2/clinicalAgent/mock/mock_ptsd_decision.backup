/*******************************************************************************
 *
 * Copyright (C) 2012 by Cognitive Medical Systems, Inc (http://www.cognitivemedciine.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
 * use this file except in compliance with the License. You may obtain a copy of 
 * the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed 
 * under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR 
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 ******************************************************************************/
 
 /******************************************************************************
 * Socratic Grid contains components to which third party terms apply. To comply 
 * with these terms, the following notice is provided:
 *
 * TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
 * Copyright (c) 2008, Nationwide Health Information Network (NHIN) Connect. All 
 * rights reserved.
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions are met:
 * 
 * - Redistributions of source code must retain the above copyright notice, this 
 *   list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice, 
 *   this list of conditions and the following disclaimer in the documentation 
 *   and/or other materials provided with the distribution.
 * - Neither the name of the NHIN Connect Project nor the names of its 
 *   contributors may be used to endorse or promote products derived from this 
 *   software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
 * INTERRUPTION HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 * END OF TERMS AND CONDITIONS
 *
 ******************************************************************************/
package org.socraticgrid.kmr2.clinicalAgent.models.decision;

import org.drools.pmml.pmml_4_1.ModelMarker;
import org.drools.pmml.pmml_4_1.PMML4Field;

import org.drools.mas.*;
import org.drools.base.DroolsQuery;

import org.drools.informer.Answer;
import org.drools.informer.Questionnaire;

import org.drools.informer.ProgressStatus;
import org.drools.informer.Question;
import org.drools.informer.DomainModelAssociation;
import org.drools.informer.generator.FormRegistry;
import org.drools.informer.generator.annotations.Questionable;
import org.drools.informer.generator.annotations.QuestionMark;
import org.drools.informer.generator.annotations.AllowedAnswers;

import org.drools.informer.interaction.*;


import org.socraticgrid.kmr2.clinicalAgent.models.decision.*;
import org.socraticgrid.kmr2.clinicalAgent.models.decision.DxAutoCommittingAction;
import org.socraticgrid.kmr2.clinicalAgent.models.decision.DxExternalCommittingAction;
import org.socraticgrid.kmr2.clinicalAgent.models.decision.DxAction;


declare org.socraticgrid.kmr2.clinicalAgent.models.decision.DxAutoCommittingAction end
declare org.socraticgrid.kmr2.clinicalAgent.models.decision.DxExternalCommittingAction end














rule "Execute_AskAlcohol I"
no-loop
when
    DiagnosticGuideProcess( $dm : diagModel == "MockDiag", $steps : diagnosticProcessHistory, status != "Complete" )
    DxDecision( this memberOf $steps, current == true, $acts : actions )
    AskAlcohol( question == "true", this memberOf $acts, actionId != null )
    ModelMarker( modelName == $dm )
then
    System.out.println("Our friend uses ALCOHOL");
    drools.getWorkingMemory().getWorkingMemoryEntryPoint("in_Alcohol").insert("yes");
    drools.getWorkingMemory().getWorkingMemoryEntryPoint("in_Deployments").insert("2+");
end

rule "Execute_AskAlcohol II"
no-loop
when
    DiagnosticGuideProcess( $dm : diagModel == "MockDiag", $steps : diagnosticProcessHistory, status != "Complete" )
    DxDecision( this memberOf $steps, current == true, $acts : actions )
    AskAlcohol( question == "false", this memberOf $acts, actionId != null )
    ModelMarker( modelName == $dm )
then
    System.out.println("Our friend uses ALCOHOL NOT");
    drools.getWorkingMemory().getWorkingMemoryEntryPoint("in_Alcohol").insert("no");
    drools.getWorkingMemory().getWorkingMemoryEntryPoint("in_Deployments").insert("0");
end


rule "AskAlcohol Frame axiom"
when
    DiagnosticGuideProcess( $dm : diagModel == "MockDiag", $steps : diagnosticProcessHistory, status != "Complete" )
    DxDecision( $step : stage, this memberOf $steps, current == true, $acts : actions )
    DxDecision( stage == ($step - 1), current == false, $prevs : actions ) from $steps
    $curr : AskAlcohol( $q : question, this memberOf $acts, actionId != null )
    $prev : AskAlcohol( $old : question != $q, actionId != null ) from $prevs
then
    System.out.println("Our friend used to use ALCOHOL, ands still does");
    $curr.setQuestion( $old );
    update( $curr );
end




declare MockBooking
@role(event)
    actionId        : String
end

declare MockTest
@role(event)
    actionId        : String
end

declare MockAnalysis
@role(event)
    actionId        : String
end

declare MockResult
@role(event)
    actionId        : String
end

rule "Perform Costly Test"
when
    $dx   : DiagnosticGuideProcess( $dm : diagModel == "MockDiag", $steps : diagnosticProcessHistory, status != "Complete" )
    $step : DxDecision( this memberOf $steps, current == true, $acts : actions )
    $act  : DoExcruciatinglyPainfulTest( confirm == "true", this memberOf $acts, $aid : actionId != null, status == "Started" )
then
    System.out.println(" @@@@@@@@@@  We have booked a test, poor guy ");
    insertLogical( new MockBooking( $aid ) );
end

rule "Book"
when
    $b : MockBooking()
then
    System.out.println( "We have received a booking ");
end

rule "or No Book"
when
    not MockBooking()
then
    System.out.println( "No more bookings in agenda ");
end


rule "Should be the other way around"
when
    $b    : MockBooking( $aid : actionId )
//    we should check FOR a test, not its absence :)
    not     MockTest( actionId == $aid, this after[0, 2s] $b )
    $act  : DoExcruciatinglyPainfulTest( confirm == "true", actionId == $aid, status == "Started" )
then
    System.out.println(" @@@@@@@@@@  Ouch ");
    $act.setStatus( "Committed" );
    retract($b);
    insert( new MockAnalysis( $aid ) );
    update( $act );
end


rule "Now finish it"
when
    $b    : MockAnalysis( $aid : actionId )
//    we should check FOR a test, not its absence :)
    not     MockBooking( actionId == $aid, this after[0, 2s] $b )
    $act  : DoExcruciatinglyPainfulTest( confirm == "true", actionId == $aid, status == "Committed" )
then
    System.out.println(" @@@@@@@@@@  Too bad! ");
    $act.setStatus( "Complete" );
    insert( new MockResult( $aid ) );
    update( $act );
end









rule "Mark"
when
then
    insert( new ModelMarker( "MockDecision", "Post Traumatic Stress Disorder" ) );
end





//
//rule "Add AskAlcohol"
//salience 100
//no-loop
//when
//    $dx  : DiagnosticGuideProcess( decModel == "MockDecision", $acts : actions not contains AskAlcohol )
//then
//    System.out.println( " Linking' Ask Alcohol action " );
//    $acts.add( AskAlcohol.class );
//    FormRegistry.register( AskAlcohol.class );
//end
//
//
//rule "Add AskDeployment"
//salience 100
//no-loop
//when
//    $dx  : DiagnosticGuideProcess( decModel == "MockDecision", $acts : actions not contains AskDeployment )
//then
//    $acts.add( AskDeployment.class );
//    FormRegistry.register( AskDeployment.class );
//end
//
//rule "Add DoTest"
//salience 100
//no-loop
//when
//    $dx  : DiagnosticGuideProcess( decModel == "MockDecision", $acts : actions not contains DoExcruciatinglyPainfulTest )
//then
//    $acts.add( DoExcruciatinglyPainfulTest.class );
//    FormRegistry.register( DoExcruciatinglyPainfulTest.class );
//end
//
//rule "Add Ask1"
//salience 100
//no-loop
//when
//    $dx  : DiagnosticGuideProcess( decModel == "MockDecision", $acts : actions not contains AskSomething1 )
//then
//    $acts.add( AskSomething1.class );
//    FormRegistry.register( AskSomething1.class );
//end
//rule "Add Ask2"
//salience 100
//no-loop
//when
//    $dx  : DiagnosticGuideProcess( decModel == "MockDecision", $acts : actions not contains AskSomething2 )
//then
//    $acts.add( AskSomething2.class );
//    FormRegistry.register( AskSomething2.class );
//end
//rule "Add Ask3"
//salience 100
//no-loop
//when
//    $dx  : DiagnosticGuideProcess( decModel == "MockDecision", $acts : actions not contains AskSomething3 )
//then
//    $acts.add( AskSomething3.class );
//    FormRegistry.register( AskSomething3.class );
//end
//rule "Add Ask4"
//salience 100
//no-loop
//when
//    $dx  : DiagnosticGuideProcess( decModel == "MockDecision", $acts : actions not contains AskSomething4 )
//then
//    $acts.add( AskSomething4.class );
//    FormRegistry.register( AskSomething4.class );
//end
//rule "Add Ask5"
//salience 100
//no-loop
//when
//    $dx  : DiagnosticGuideProcess( decModel == "MockDecision", $acts : actions not contains AskSomething5 )
//then
//    $acts.add( AskSomething5.class );
//    FormRegistry.register( AskSomething5.class );
//end
//rule "Add Ask6"
//salience 100
//no-loop
//when
//    $dx  : DiagnosticGuideProcess( decModel == "MockDecision", $acts : actions not contains AskSomething6 )
//then
//    $acts.add( AskSomething6.class );
//    FormRegistry.register( AskSomething6.class );
//end
//rule "Add Ask7"
//salience 100
//no-loop
//when
//    $dx  : DiagnosticGuideProcess( decModel == "MockDecision", $acts : actions not contains AskSomething7 )
//then
//    $acts.add( AskSomething7.class );
//    FormRegistry.register( AskSomething7.class );
//end
//rule "Add Ask8"
//salience 100
//no-loop
//when
//    $dx  : DiagnosticGuideProcess( decModel == "MockDecision", $acts : actions not contains AskSomething8 )
//then
//    $acts.add( AskSomething8.class );
//    FormRegistry.register( AskSomething8.class );
//end























rule "Close step"
salience 10
when
    $dx     : DiagnosticGuideProcess( $id : id, $steps : diagnosticProcessHistory, $num : diagnosticProcessHistory.size(), status != "Complete" )
    $x      : DxStep( dxProcessId == $id, stage > 0, stage == $num )
    $prev   : DxDecision( this memberOf $steps, current == true ) from $steps
then
    System.out.println( "Closing " + $prev );
    $prev.setCurrent( false );
//    retract( $prev );
end


rule "Close step II"
salience 15
when
    $dx     : DiagnosticGuideProcess( $id : id, $steps : diagnosticProcessHistory, $num : diagnosticProcessHistory.size(), status != "Complete" )
    $x      : DxStep( dxProcessId == $id, stage > 0, stage == $num )
    $prev   : DxDecision( this memberOf $steps, current == true, $acts : actions ) from $steps
    $act    : DxAction( actionId != null ) from $acts
//    $tkt    : InteractionTicket( id == $formId )
then
    System.out.println( "Killing orphan " + $act );
    retract( $act );
//    retract( $tkt );
end



rule "Close last step"
salience 10
when
    $dx     : DiagnosticGuideProcess( $id : id, $steps : diagnosticProcessHistory, status == "Complete" )
    $prev   : DxDecision( this memberOf $steps, current == true ) from $steps
then
    System.out.println( "Closing LAST STEP" + $prev );
    $prev.setCurrent( false );
//    retract( $prev );
end

rule "Close last step II"
salience 15
when
    $dx     : DiagnosticGuideProcess( $id : id, $steps : diagnosticProcessHistory, status == "Complete" )
    $prev   : DxDecision( this memberOf $steps, current == true, $acts : actions ) from $steps
    $act    : DxAction( actionId != null, $formId : questionnaireId ) from $acts
//    $tkt    : InteractionTicket( id == $formId )
then
    System.out.println( "Killing LAST orphan " + $act );
    retract( $act );
//    retract( $tkt );
end














rule "Create step"
no-loop
when
    $dx     : DiagnosticGuideProcess( $id : id, $steps : diagnosticProcessHistory, $num : diagnosticProcessHistory.size(), status != "Complete" )
    $x      : DxStep( dxProcessId == $id, stage == $num )
then
    System.out.println( "Create step " );
    DxDecision step = new DxDecision( java.util.UUID.randomUUID().toString() );
        step.setStage( $steps.size() );
        step.setCurrent( true );
        step.setDescr( "Stage " + step.getStage() );
        step.setActions( new java.util.ArrayList() );
    $steps.add( step );
    update( $dx );
    insertLogical( step );
end










rule"Assign id to actions"
when
    $act : DxAction( actionId == null )
then
    modify ( $act )
        setActionId( java.util.UUID.randomUUID().toString() );
    }
end


//rule "Initialize action forms"
//salience 100
//when
//    DroolsQuery( name == "ticket", $args : elements )
//    not InteractionTicket( id == $args[1] )
//then
//    String ticketId = $args[1].toString();
//    InteractionTicket ticket = new InteractionTicket( ticketId,
//                                                      new java.util.ArrayList(),
//                                                      null );
//
//    ticket.getInteractions().add( new Interaction( $args[0].toString(), null, new java.util.ArrayList(), new java.util.ArrayList() ) );
//    System.out.println( "Created " + ticket + " on the fly");
//    insert( ticket );
//end




//rule "Clone Actions"
//dialect "mvel"
//salience ($intg - 300)
//no-loop
//when
//    $dx     : DiagnosticGuideProcess( $id : id, $acts : actions, actions.size() > 0, $steps : diagnosticProcessHistory, status == "Started" )
//    $x      : DxStep( dxProcessId == $id, $n : stage )
//    $step   : DxDecision( stage == $n, this memberOf $steps, $choices : actions, current == true ) from $steps
//    $class  : Class( $className : name ) from $acts
//              not DxAction( this memberOf $choices, class == $class )
//    $tid    : String() from UUID.randomUUID().toString()
//
//              ticket( $className, $tid, $ticket ; )
//              formMarker( $tid, $className, $formId ; )
//              $act : DxAction( actionId != null, questionnaireId == $formId, utility < 0.0, class == $class, this not memberOf $choices )
//              ?isUseful( $act, $util, $intg; )
//then
//    System.out.println( "Configuring action " + $intg + "in stage " + $n);
//        $act.setUtility( $util );
//        $act.setStatus( "Not Started" );
//        $choices.add( 0, $act );
////        update( $step );
//        update( $act );
//end



rule "Synch IDs"
when
    $act : DxAction( actionId != null, $qid : questionnaireId, $currNq : numQuestions )
    Questionnaire( id == $qid, $nq : numAvailableItems != $currNq )
then
//    System.out.println( "Set action n. questions to" + $nq );
    $act.setNumQuestions( $nq );
end





rule "Update Diagnosis I"
when
    $dx  : DiagnosticGuideProcess( $mid : diagModel, status != "Complete" )
    $fld : PMML4Field( context == $mid, name == "Diag" )
then
    System.out.println( "Model diag " + $fld );
    DiagValue val = don( $fld, DiagValue.class, false );
end

rule "Update Diagnosis II"
no-loop
when
    $dx     : DiagnosticGuideProcess( $id : id, $mid : diagModel, $steps : diagnosticProcessHistory, status != "Complete" )
    $x      : DxStep( dxProcessId == $id, $n : stage )
    $step   : DxDecision( stage == $n, this memberOf $steps, current == true, $curr : diseaseProbability )
              DiagValue( context == $mid, $val : value )
then
    int p = + (int) Math.round( $val * 100 );
    System.err.println(" New estimate is " + p );
    $step.setDiseaseProbability( p ) ;
    update( $step );
end


rule "Update Severity : Low"
when
    $dx : DxDecision( $curr : diseaseProbability <= 25 )
then
    $dx.setSeverity( "Low" );
    $dx.setResponse( "The estimated disease probability is Low (" + $curr + ")" );
end

rule "Update Severity : Average"
when
    $dx : DxDecision( $curr : diseaseProbability > 25 && <= 50 )
then
    $dx.setSeverity( "Average" );
    $dx.setResponse( "The estimated disease probability is Average (" + $curr + ")" );
end

rule "Update Severity : High"
when
    $dx : DxDecision( $curr : diseaseProbability > 50 && <= 75)
then
    $dx.setSeverity( "High" );
    $dx.setResponse( "The estimated disease probability is High (" + $curr + ")" );
end

rule "Update Severity : Very High"
when
    $dx : DxDecision( $curr : diseaseProbability > 75)
then
    $dx.setSeverity( "Very High" );
    $dx.setResponse( "The estimated disease probability is Very High (" + $curr + ")" );
end









rule "Update Utility : Low"
when
    $dx : DxAction( actionId != null, $curr : utility <= 0.25)
then
    $dx.setUtilityLevel( "Low" );
end

rule "Update Utility : Normal"
when
    $dx : DxAction( actionId != null, $curr : utility > 0.25  )
then
    $dx.setUtilityLevel( "Normal" );
end


rule "Find most useful"
salience -100
when
    $step   : DxDecision( current == true, $acts : actions )
    $dx     : DxAction( actionId != null, this memberOf $acts, $u : utility )
              not DxAction( actionId != null, this != $dx, this memberOf $acts, utility > $u )
then
    $dx.setUtilityLevel( "Suggested" );
end






rule "Commit actions"
when
    $ps : ProgressStatus( $qid : formId, percentage > 0 && < 100 )
    $dx : DxAutoCommittingAction( questionnaireId == $qid, $aid : actionId, status == "Started" )
then
    $dx.setStatus( "Committed" );
    $dx.setStatusUpdated( new java.text.SimpleDateFormat().format( new java.util.Date() ) );
    update($dx);
end



rule "Complete actions"
when
    $ps : ProgressStatus( $qid : formId, percentage == 100 )
    $dx : DxAutoCommittingAction( questionnaireId == $qid, $aid : actionId, status == "Started" || == "Committed" )
then
    $dx.setStatus( "Complete" );
    $dx.setStatusUpdated( new java.text.SimpleDateFormat().format( new java.util.Date() ) );
    update($dx);
end






rule "Freeze auto-commit questions"
when
    $act : DxAutoCommittingAction( status == "Complete" )
    $dma : DomainModelAssociation( object == $act, $qid : questionId )
    $qst : Question( id == $qid, finalAnswer == false )
then
    System.out.println( " ------------------------------------> Freeze ------------> " + $qst );
    $qst.setFinalAnswer( true );
    update( $qst );
end

rule "Freeze manual-commit questions"
when
    $act : DxExternalCommittingAction( status == "Committed" )
    $dma : DomainModelAssociation( object == $act, $qid : questionId )
    $qst : Question( id == $qid, finalAnswer == false )
then
    System.out.println( " ------------------------------------> Freeze ------------> " + $qst );
    $qst.setFinalAnswer( true );
    update( $qst );
end










rule "Disable Guide Cancel on Progress"
salience 999
when
    $dx     : DiagnosticGuideProcess( $id : id, $steps : diagnosticProcessHistory, $num : diagnosticProcessHistory.size() > 1, status == "Started", canCancel == true )
then
    modify ( $dx ) {
        setCanCancel( false );
    }
end

rule "Disable Guide Cancel"
salience 999
when
    $dx     : DiagnosticGuideProcess( $id : id, $steps : diagnosticProcessHistory, $num : diagnosticProcessHistory.size() == 1, status == "Started", canCancel == true )
    $step   : DxDecision( this memberOf $steps, current == true, $acts : actions ) from $steps
    exists  ( DxAction( status != "Not Started" ) from $acts )
then
    modify ( $dx ) {
        setCanCancel( false );
    }
end

rule "Re-enable Guide Cancel"
salience 999
when
    $dx     : DiagnosticGuideProcess( $id : id, $steps : diagnosticProcessHistory, $num : diagnosticProcessHistory.size() == 1, status == "Started", canCancel == false )
    $step   : DxDecision( this memberOf $steps, current == true, $acts : actions ) from $steps
    forall  ( DxAction( status == "Not Started" ) from $acts )
then
    modify ( $dx ) {
        setCanCancel( true );
    }
end





rule "Remove step marker"
salience -9999
when
    $x : DxStep()
then
    System.out.println( "REMOVED STEP COUNTER ");
    retract( $x );
end



