/*******************************************************************************
 *
 * Copyright (C) 2012 by Cognitive Medical Systems, Inc (http://www.cognitivemedciine.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
 * use this file except in compliance with the License. You may obtain a copy of 
 * the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed 
 * under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR 
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 ******************************************************************************/
 
 /******************************************************************************
 * Socratic Grid contains components to which third party terms apply. To comply 
 * with these terms, the following notice is provided:
 *
 * TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
 * Copyright (c) 2008, Nationwide Health Information Network (NHIN) Connect. All 
 * rights reserved.
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions are met:
 * 
 * - Redistributions of source code must retain the above copyright notice, this 
 *   list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice, 
 *   this list of conditions and the following disclaimer in the documentation 
 *   and/or other materials provided with the distribution.
 * - Neither the name of the NHIN Connect Project nor the names of its 
 *   contributors may be used to endorse or promote products derived from this 
 *   software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
 * INTERRUPTION HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 * END OF TERMS AND CONDITIONS
 *
 ******************************************************************************/

package org.socraticgrid.kmr2.clinicalAgent.services;

import org.drools.mas.body.content.Action;
import org.socraticgrid.kmr2.clinicalAgent.models.decision.*;

import org.drools.mas.util.MessageContentEncoder;
import org.drools.mas.Encodings;

import org.drools.mas.util.helper.*;
import org.drools.mas.core.helpers.*;




rule "Update State on complete"
salience 10
when
    $a  : Action( actionName == "getDiagnosticProcessStatus",
                  $dxProcessId   : this["dxProcessId"] )
    $dx : DiagnosticGuideProcess( id == $dxProcessId, status == "Complete" || == "Cancel", canAdvance == true )
then
    System.out.println("Process complete/cancelled, no advance");
    modify ($dx) {
        setCanAdvance( false );
    }
end


rule "Update State by action I"
salience 10
when
    $a  : Action( actionName == "getDiagnosticProcessStatus",
                  $dxProcessId   : this["dxProcessId"] )
    $dx : DiagnosticGuideProcess( id == $dxProcessId, status != "Complete" && != "Cancel", $steps : diagnosticProcessHistory, canAdvance == false )
          DxDecision( current == true, this memberOf $steps, $acts : actions )
          not DxAction( this memberOf $acts, status == "Started" || == "Committed" )
then
    System.out.println("Here we advance");
    modify ($dx) {
        setCanAdvance( true );
    }
end

rule "Update State by action II"
salience 10
when
    $a  : Action( actionName == "getDiagnosticProcessStatus",
                  $dxProcessId   : this["dxProcessId"] )
    $dx : DiagnosticGuideProcess( id == $dxProcessId, status != "Complete" && != "Cancel", $steps : diagnosticProcessHistory, canAdvance == true )
          DxDecision( current == true, this memberOf $steps, $acts : actions )
          exists( DxAction( this memberOf $acts, status == "Started" || == "Committed" ) )
then
    System.out.println("Pending action, no advance");
    modify ($dx) {
        setCanAdvance( false );
    }
end




query getDiagnosticProcessStatus( String $userId, String $patientId, String $dxProcessId, boolean $refresh, DiagnosticGuideProcess $return )
    $return := DiagnosticGuideProcess( id == $dxProcessId )
end


rule "Action_Request : getDiagnosticProcessStatus"
salience -100
when
    $s : SessionLocator($sessionId: sessionId, mind == true )
    $a : Action( actionName == "getDiagnosticProcessStatus", $msgId : msgId,
                 $userId      : this["userId"],
                 $patientId   : this["patientId"],
                 $dxProcessId : this["dxProcessId"],
                 $refresh     : this["forceRefresh"]
                )
    getDiagnosticProcessStatus( $userId, $patientId, $dxProcessId, $refresh, $return ; )
then
    System.out.println( "Returing from getDxProcessStatus " + $dxProcessId + " on a req from mesg " + $msgId );
    retract( $a );
    ResponseContent.deliverResponse($sessionId, $msgId, $return, null, true );
end



rule "Action_Request : getDiagnosticProcessStatus failure"
salience -100
when
    $s : SessionLocator($sessionId: sessionId, mind == true )
    $a : Action( actionName == "getDiagnosticProcessStatus", $msgId : msgId,
                 $userId      : this["userId"],
                 $patientId   : this["patientId"],
                 $processId   : this["dxProcessId"],
                 $refresh     : this["forceRefresh"]
                )
    not ?getDiagnosticProcessStatus( $userId, $patientId, $dxProcessId, $refresh, $return ; )
then
    retract( $a );
    ResponseContent.deliverResponse( $sessionId, $msgId, null,
                                     new ExecutionFault( $msgId, "Dx Process not found " + $processId ),
                                     true );
end