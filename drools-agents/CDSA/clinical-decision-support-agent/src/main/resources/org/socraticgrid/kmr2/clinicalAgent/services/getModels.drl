/*******************************************************************************
 *
 * Copyright (C) 2012 by Cognitive Medical Systems, Inc (http://www.cognitivemedciine.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
 * use this file except in compliance with the License. You may obtain a copy of 
 * the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed 
 * under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR 
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 ******************************************************************************/
 
 /******************************************************************************
 * Socratic Grid contains components to which third party terms apply. To comply 
 * with these terms, the following notice is provided:
 *
 * TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
 * Copyright (c) 2008, Nationwide Health Information Network (NHIN) Connect. All 
 * rights reserved.
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions are met:
 * 
 * - Redistributions of source code must retain the above copyright notice, this 
 *   list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice, 
 *   this list of conditions and the following disclaimer in the documentation 
 *   and/or other materials provided with the distribution.
 * - Neither the name of the NHIN Connect Project nor the names of its 
 *   contributors may be used to endorse or promote products derived from this 
 *   software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
 * INTERRUPTION HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 * END OF TERMS AND CONDITIONS
 *
 ******************************************************************************/

package org.socraticgrid.kmr2.clinicalAgent.services;

import org.drools.mas.util.ResourceDescriptor;

import java.util.List;
import java.util.ArrayList;

import org.drools.mas.util.MessageContentEncoder;
import org.drools.mas.Encodings;

import org.drools.pmml.pmml_4_1.ModelMarker;

import org.drools.mas.util.helper.*;



declare ModelElement
    modelId             : String    @key
    tags                : ArrayList @key
    title               : String
    disease             : String
    displayThreshold    : int
end

declare ModelList
    patientId           : String    @key
    tags                : ArrayList @key
    models              : List
end



rule "Action_Request : getRiskModels Init"
salience 10
when
    $a :  Action( actionName == "getRiskModels",
                  $userId    : this["userId"],
                  $patientId : this["patientId"]
                )
    not   ModelList( patientId == $patientId, tags.size() == 1, tags contains "Risk" )
then
    insert( new ModelList( (String) $patientId, new ArrayList( java.util.Arrays.asList("Risk") ), null ) );
end


rule "Action_Request : getModels Init"
salience 10
when
    $a :  Action( actionName == "getModels",
                  $userId    : this["userId"],
                  $tags      : this["types"],
                  $patientId : this["patientId"]
                )
    not   ModelList( $patientId, $tags; )
then
    insert( new ModelList( (String) $patientId, new ArrayList( (List) $tags ), null ) );
end







rule "Combine with threshold"
when
    ResourceDescriptor( $id : name, $type : description, $tags : categories  )
    RiskThreshold( modelId == $id, type == "Display", $thold : threshold )
then
    System.out.println(" Combine with th ");
    insertLogical( new ModelElement( $id, new ArrayList($tags), $type, $type, $thold ) );
end

rule "Default threshold"
when
    ResourceDescriptor( $id : name, $type : description, $tags : categories )
    not RiskThreshold( modelId == $id, type == "Display" )
    ?defaultRiskThreshold( $def ; )
then
    ModelElement emm = new ModelElement( $id, new ArrayList($tags), $type, $type, $def );
    System.out.println(" Set default th " + $def + " on model " + emm );
    insertLogical( emm );
end



rule "Listing"
salience -1
no-loop
when
    $ml : ModelList( $queryTags : tags )
    $list : List( $num : size() ) from accumulate (
        $m : ModelElement( tags.containsAll( $queryTags ) )
        collectList( $m )
    )
then
    System.out.println( "UPDATING MODEL LIST TO " + $list + ", query was " + $queryTags );
    modify ( $ml ) {
        setModels( new ArrayList( $list ) );
    }
end


query getModels( String $userId, String $patientId, List $types, ModelList $return )
    $return :=  ModelList( patientId == $patientId, tags == $types )
end

query getRiskModels( String $userId, String $patientId, ModelList $return )
    $return :=  ModelList( patientId == $patientId, tags.size() == 1, tags contains "Risk" )
end



rule "Action_Request : getModels Clear"
salience -100
when
    $s : SessionLocator( $sessionId: sessionId, mind == true )
    $a : Action( actionName == "getModels", $msgId : msgId,
                      $userId    : this["userId"],
                      $types     : this["types"],
                      $patientId : this["patientId"]
                    )
    getModels( $userId, $patientId, $types, $return ; )
then
    retract( $a );
    ResponseContent.deliverResponse($sessionId, $msgId, $return, null, true );
end

rule "Action_Request : getRiskModels Clear"
salience -100
when
    $s : SessionLocator( $sessionId: sessionId, mind == true )
    $a : Action( actionName == "getRiskModels", $msgId : msgId,
                      $userId    : this["userId"],
                      $patientId : this["patientId"]
                    )
    getRiskModels( $userId, $patientId, $return ; )
then
    retract( $a );
    ResponseContent.deliverResponse($sessionId, $msgId, $return, null, true );
end
