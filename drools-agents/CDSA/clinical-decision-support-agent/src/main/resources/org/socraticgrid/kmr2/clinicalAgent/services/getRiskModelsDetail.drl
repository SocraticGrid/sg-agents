/*******************************************************************************
 *
 * Copyright (C) 2012 by Cognitive Medical Systems, Inc (http://www.cognitivemedciine.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
 * use this file except in compliance with the License. You may obtain a copy of 
 * the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed 
 * under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR 
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 ******************************************************************************/
 
 /******************************************************************************
 * Socratic Grid contains components to which third party terms apply. To comply 
 * with these terms, the following notice is provided:
 *
 * TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
 * Copyright (c) 2008, Nationwide Health Information Network (NHIN) Connect. All 
 * rights reserved.
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions are met:
 * 
 * - Redistributions of source code must retain the above copyright notice, this 
 *   list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice, 
 *   this list of conditions and the following disclaimer in the documentation 
 *   and/or other materials provided with the distribution.
 * - Neither the name of the NHIN Connect Project nor the names of its 
 *   contributors may be used to endorse or promote products derived from this 
 *   software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
 * INTERRUPTION HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 * END OF TERMS AND CONDITIONS
 *
 ******************************************************************************/

package org.socraticgrid.kmr2.clinicalAgent.services;


import org.drools.mas.body.content.Action;
import org.drools.mas.core.SessionManager;
import org.drools.mas.util.helper.SessionLocator;
import org.drools.informer.*;
import org.drools.informer.xml.ChangeCollector;
import org.drools.informer.presentation.*;

import org.drools.interaction.*;

import org.drools.mas.util.ResourceDescriptor;
import java.util.List;
import java.util.ArrayList;

import org.drools.pmml.pmml_4_1.ModelMarker;
import org.drools.pmml.pmml_4_1.PMML4Field;
import org.drools.pmml.pmml_4_1.PMML4Helper;

import org.socraticgrid.kmr2.clinicalAgent.models.decision.*;
import org.socraticgrid.kmr2.clinicalAgent.models.risk.*;

import org.drools.mas.Encodings;

import org.drools.mas.core.SessionManager;

import org.drools.mas.util.helper.*;
import org.drools.mas.core.helpers.*;


rule "Action_Request : getRiskModelsDetail"
when
    $a :  Action( actionName == "getRiskModelsDetail",
                  $userId    : this["userId"],
                  $patientId : this["patientId"],
                  $modelIds  : this["modelIds"]
                )
    not   GetRiskModelsDetail()
then
    GetRiskModelsDetail ans = new GetRiskModelsDetail();
        ans.setModelIds( java.util.Arrays.asList( (String[]) $modelIds ) );
        ans.setRiskModels( new ArrayList() );
        System.out.println( "Received GRMD action " + $modelIds + ", preparing " + ans );
    insert( ans );
end


//rule "Action_Request : getRiskModelsDetail - refresh"
//no-loop
//when
//    $a :  Action( actionName == "getRiskModelsDetail",
//                  $userId    : this["userId"],
//                  $patientId : this["patientId"],
//                  $modelIds  : this["modelIds"]
//                )
//    $g : GetRiskModelsDetail( $mids : modelIds )
//    exists String( this not memberOf $mids ) from ( (String[]) $modelIds )
//then
//    modify ( $g ) {
//        setModelIds( java.util.Arrays.asList( (String[]) $modelIds ) ),
//        setRiskModels( new ArrayList() );
//    }
//    System.out.println(" UPDATED GRMD " + $g );
//end


/**
Adds .pmml resources into sub-sessions as a response to a 'getRiskModelsDetail' Action.
**/
rule "Action_Request : getRiskModelsDetail - init Models"
when
    $a :  Action( actionName == "getRiskModelsDetail",
                  $userId    : this["userId"],
                  $patientId : this["patientId"],
                  $modelIds  : this["modelIds"]
                )
    $id : String() from $modelIds
    not   ModelMarker( modelName == $id )
    $rs : ResourceDescriptor( name == $id )
    SessionLocator( $sessionId: sessionId, mind == false )
then
    String defPack = PMML4Helper.getPack();
    PMML4Helper.setPack( "org.drools.pmml.pmml_4_1.risk."+$id );

    SessionHelper.getInstance().getSessionManager($sessionId).addResource($rs);
    System.out.println("DONE WITH THE LOAD OF A MODEL " + $id + " @ " + new java.util.Date().getTime() );

//    PMML4Helper.setPack( defPack );
end


rule "ModelMarking"
when
    $mm   : ModelMarker( $id : modelName )
then
    System.out.println( "MODEL MARKER DETECTED " + $mm );
end

rule "Action_Request : getRiskModelsDetail - model info"
when
    $mm   : ModelMarker( $id : modelName )
    $res  : ResourceDescriptor( name == $id, $descr : description )
    $grmd : GetRiskModelsDetail( $details : riskModels, modelIds contains $id )
    not     RiskModelDetail( modelId == $id )
then

    RiskModelDetail rmd = new RiskModelDetail();
        rmd.setModelId( $id );
        rmd.setTitle( $descr );
        rmd.setDisease( $descr );

    System.out.println(" CREATE RMD AN ADD " + rmd );

    insert( rmd );
    modify ( $grmd ) {
        getRiskModels().add( rmd );
    }

end



rule "Action_Request : getRiskModelsDetail - model info refresh"
when
    $mm   : ModelMarker( $id : modelName )
    $res  : ResourceDescriptor( name == $id, $descr : description )
    $grmd : GetRiskModelsDetail( $details : riskModels, modelIds contains $id )
    $rmd  : RiskModelDetail( modelId == $id, this not memberOf $details )
then
    modify ( $grmd ) {
        getRiskModels().add( $rmd );
    }
    System.out.println(" ADDING TO GRMD " + $rmd );
end







rule "Update Risk I"
when
    $fld : PMML4Field( name matches ".*Risk$"  )
then
    System.out.println(" DONNING A RISK VALUE " + $fld );
    RiskValue val = don( $fld, RiskValue.class, true );
end

rule "Update Risk II"
when
    $rmd : RiskModelDetail( $mid : modelId )
    $rsk : RiskValue( context == $mid, $val : value )
then
    System.out.println(" UPDATING RISK VALUE " + $rsk + " on  " + $rmd );
    $rmd.setRelativeRisk( (int) Math.round( $val * 100 ) ) ;
end

rule "Update Risk III"
when
    $rmd : RiskModelDetail( $mid : modelId )
           not RiskValue( context == $mid )
then
    System.out.println(" CLEARING RISK VALUE " + $rmd );
    $rmd.setRelativeRisk( -1 ) ;
end


rule "Threshold"
when
    $rmd : RiskModelDetail( $mid : modelId )
    RiskThreshold( $mid, "Alert", $value ; )
then
    System.err.println("Setting alert thold in RiskModelDetail " + $value );
    $rmd.setAlertThreshold( $value );
end


rule "Include Survey"
no-loop
when
    $rmd : RiskModelDetail( $mid : modelId, $curr : surveyId )
           ?getItemId( $mid, $qid, $surveyId ; )
    eval( ! $surveyId.equals( $curr ) )
//           getSurvey( $userId, $patientId, $surveyId, $return ; )
then
    System.out.println( "LINKING RMD " + $rmd + " TO ITS SURVEY " + $surveyId );
    modify ( $rmd ) {
        setSurveyId( $surveyId );
    }
end


rule "[TEST] Include Survey"
when
    $rmd : RiskModelDetail( $mid : modelId, $curr : surveyId )
    //$qid : String() from ( $mid+"_Questionnaire" )
    //$item: Item(type == $mid)
    ?getItemId( $mid, $qid, $surveyId ; )
  //  eval( ! $surveyId.equals( $curr ) )
//           getSurvey( $userId, $patientId, $surveyId, $return ; )
then
    System.out.println( "\n");
    System.out.println( "^^^RMD: " + $rmd );
    System.out.println( "   mid: " + $mid );
    System.out.println( "   qid: " + $qid );
    System.out.println( "   curr: " + $curr );
    //System.out.println( "   Item: " + $item );
    //System.out.println( "   Type ->: " + $item.getType() +" == "+$mid+"?");
    //System.out.println( "   Context ->: " + $item.getContext() +" == "+$mid+"?");
    System.out.println( "   surveyId: " + $surveyId);
    System.out.println( "\n");
end


rule "Include Dx Guide"
when
    $rmd : RiskModelDetail( $mid : modelId, $dis : disease )
    $dxg : DiagnosticGuideProcess( disease == $dis, $id : id, $status : status == "Started" )
then
    $rmd.setDxProcessId( $id );
    $rmd.setDxProcessStatus( $status );
end

rule "Clear Dx Guide"
when
    $rmd : RiskModelDetail( $mid : modelId, $dis : disease )
    DiagnosticGuideProcess( disease == $dis, $id : id )
    not    DiagnosticGuideProcess( disease == $dis, $id == id, $status : status != "Complete" )
then
    $rmd.setDxProcessId( $id );
    $rmd.setDxProcessStatus( "Complete" );
end

rule "No Dx Guide"
when
    $rmd : RiskModelDetail( $mid : modelId, $dis : disease )
    not    DiagnosticGuideProcess( disease == $dis )
then
    $rmd.setDxProcessId( null );
    $rmd.setDxProcessStatus( "Not Started" );
end








rule "Update Severity : Not Available"
when
    $rmd : RiskModelDetail( $mid : modelId )
           not RiskValue( context == $mid )
then
    $rmd.setSeverity( "n/a" );
end


rule "Update Severity : Low"
when
    $rmd : RiskModelDetail( $mid : modelId )
           RiskValue( context == $mid, $val : value <= 0.25 )
then
    $rmd.setSeverity( "Low" );
end

rule "Update Severity : Average"
when
    $rmd : RiskModelDetail( $mid : modelId )
           RiskValue( context == $mid, $val : value > 0.25 && <= 0.50 )
then
    $rmd.setSeverity( "Average" );
end

rule "Update Severity : High"
when
    $rmd : RiskModelDetail( $mid : modelId )
           RiskValue( context == $mid, $val : value > 0.50 && <= 0.75 )
then
    $rmd.setSeverity( "High" );
end

rule "Update Severity : Very High"
when
    $rmd : RiskModelDetail( $mid : modelId )
           RiskValue( context == $mid, $val : value > 0.75 )
then
    $rmd.setSeverity( "Very High" );
end





query getRiskModelsDetail( String $userId, String $patientId, String[] $modelIds, GetRiskModelsDetail $return )
    $return    :=  GetRiskModelsDetail( modelIds != null, modelIds.size() == riskModels.size() )
end


rule "Action_Request : getRiskModelsDetail - clear"
salience -9999
when
    $s : SessionLocator($sessionId: sessionId, mind == true )
    $a : Action( actionName == "getRiskModelsDetail", $msgId : msgId,
                      $userId    : this["userId"],
                      $patientId : this["patientId"],
                      $modelIds  : this["modelIds"]
                )
    getRiskModelsDetail( $userId, $patientId, $modelIds, $return ; )
then
    retract( $a );
    retract( $return );
    ResponseContent.deliverResponse($sessionId, $msgId, $return, null, true );
end




