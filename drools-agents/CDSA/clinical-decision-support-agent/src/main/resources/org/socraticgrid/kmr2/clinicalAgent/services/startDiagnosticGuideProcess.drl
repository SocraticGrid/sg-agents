/*******************************************************************************
 *
 * Copyright (C) 2012 by Cognitive Medical Systems, Inc (http://www.cognitivemedciine.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
 * use this file except in compliance with the License. You may obtain a copy of 
 * the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed 
 * under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR 
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 ******************************************************************************/
 
 /******************************************************************************
 * Socratic Grid contains components to which third party terms apply. To comply 
 * with these terms, the following notice is provided:
 *
 * TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
 * Copyright (c) 2008, Nationwide Health Information Network (NHIN) Connect. All 
 * rights reserved.
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions are met:
 * 
 * - Redistributions of source code must retain the above copyright notice, this 
 *   list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice, 
 *   this list of conditions and the following disclaimer in the documentation 
 *   and/or other materials provided with the distribution.
 * - Neither the name of the NHIN Connect Project nor the names of its 
 *   contributors may be used to endorse or promote products derived from this 
 *   software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
 * INTERRUPTION HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 * END OF TERMS AND CONDITIONS
 *
 ******************************************************************************/

package org.socraticgrid.kmr2.clinicalAgent.services;

import org.drools.mas.body.content.Action;
import org.socraticgrid.kmr2.clinicalAgent.models.decision.*;

import org.drools.informer.interaction.*;
import org.drools.mas.util.ResourceDescriptor;
import java.util.List;
import java.util.ArrayList;

import org.drools.pmml.pmml_4_1.ModelMarker;
import org.drools.pmml.pmml_4_1.PMML4Helper;
import org.drools.mas.util.MessageContentEncoder;
import org.drools.mas.Encodings;

import org.drools.mas.core.SessionManager;

import org.drools.mas.util.helper.*;




rule "Action_Request : startDiagnosticGuideProcess"
when
    $a : Action( actionName == "startDiagnosticGuideProcess",
                 $provId      : this["userId"],
                 $patientId   : this["patientId "],
                 $disease     : this["disease"]
                )
    ResourceDescriptor( $diagModelId : name, description == $disease, categories contains "Diagnostic" )
    ResourceDescriptor( $decModelId  : name, description == $disease, categories contains "Decision" )
    not  DiagnosticGuideProcess( decModel == $decModelId, diagModel == $diagModelId, status != "Complete", disease == $disease )
then
    String tid = java.util.UUID.randomUUID().toString();
    String dxId = java.util.UUID.randomUUID().toString();

    long jtid = -1;

    System.out.println( "Starting DX GuiDe process " + dxId );

    HumanTask task = new HumanTask(
        tid,
        jtid,
        "Diagnostic Guide Task for " + $disease,
        (String) $provId,
        java.util.Arrays.asList( $provId ),
        TaskStates.CREATED,
        new java.util.Date(),
        true,
        true,
        java.util.Collections.emptyList()
    );

    DiagnosticGuideProcess dx = new DiagnosticGuideProcess();
        dx.setId( dxId );
        dx.setStatus( "Started" );
        dx.setDisease( (String) $disease );
        dx.setDecModel( (String) $decModelId );
        dx.setDiagModel( (String) $diagModelId );
        dx.setDiagnosticProcessHistory( new java.util.LinkedList() );
        dx.setActions( new java.util.HashSet() );
        dx.setTaskId( tid );

    System.out.println( "Started DX GuiDe process ");

    insert( task );
    insert( dx );

    insert( new TaskStateTransition( tid, TaskTransitions.START, (String) $provId, new java.util.Date() ) );

    insert( new DxStep( dx.getId(), 0 ) );
end



//rule "Action_Request : startDiagnosticGuideProcess when no model available"
//when
//    $a : Action( actionName == "startDiagnosticGuideProcess",
//                 $provId      : this["userId"],
//                 $patientId   : this["patientId "],
//                 $disease     : this["disease"]
//                )
//    not ResourceDescriptor( $diagModelId : name, description == $disease, categories contains "Diagnostic" )
//    not ResourceDescriptor( $decModelId  : name, description == $disease, categories contains "Decision" )
//    not  DiagnosticGuideProcess( status != "Complete", disease == $disease )
//then
//    String tid = java.util.UUID.randomUUID().toString();
//
//    Task task = new Task(
//        tid,
//        "Diagnostic Guide Task for " + $disease,
//        (String) $provId,
//        java.util.Arrays.asList( $provId ),
//        TaskStates.CREATED,
//        new java.util.Date(),
//        true,
//        true,
//        java.util.Collections.emptyList()
//    );
//
//    System.out.println( "startDiagnosticGuideProcess when no model available") ;
//    DiagnosticGuideProcess dx = new DiagnosticGuideProcess();
//        dx.setId( java.util.UUID.randomUUID().toString() );
//        dx.setStatus( "Started" );
//        dx.setDisease( (String) $disease );
//        dx.setDiagnosticProcessHistory( new java.util.LinkedList() );
//        dx.setActions( new java.util.HashSet() );
//        dx.setTaskId( tid );
//
//    insert( task );
//    insert( dx );
//
//    insert( new TaskStateTransition( tid, TaskTransitions.START, (String) $provId, new java.util.Date() ) );
//
//    insert( new DxStep( dx.getId(), 0 ) );
//end











rule "Load Diagnostic Model"
when
    DiagnosticGuideProcess( status == "Started", $dxModel : diagModel )
//    not   ModelMarker( modelName == $dxModel )
    $rs : ResourceDescriptor( name == $dxModel, $disease : description, loaded == false )
    SessionLocator( $sessionId: sessionId, mind == false )
then
    String defPack = PMML4Helper.getPack();
    PMML4Helper.setPack( "org.drools.pmml.pmml_4_1.diag.ptsd" );

    System.out.println(" LOADING DIAGNOSTIC " + $rs );
    SessionManager.addResource($sessionId, $rs );
//    PMML4Helper.setPack( defPack );
end

rule "Load Decision Model"
when
    $dx : DiagnosticGuideProcess( status == "Started", $decModel : decModel )
//    not   ModelMarker( modelName == $decModel )
    $rs : ResourceDescriptor( name == $decModel, $disease : description, loaded == false )
    SessionLocator( $sessionId: sessionId, mind == false )
then
    System.out.println(" LOADING DECISION ");
    SessionManager.addResource( $sessionId, $rs );
end




declare StartReturn
    dxProcessId     : String        @key
end

rule "Insert result"
when
    $dx : DiagnosticGuideProcess( $dxProcessId : id, status == "Started" )
then
    insert( new StartReturn( $dxProcessId ) );
end

rule "Clear result"
when
    $r : StartReturn( $dxProcessId ; )
    not  DiagnosticGuideProcess( $dxProcessId := id )
then
    retract( $r );
end



query startDiagnosticGuideProcess( String $userId, String $patientId, String $disease, StartReturn $return )
    DiagnosticGuideProcess( disease == $disease, $dxProcessId : id, status == "Started" )
    $return := StartReturn( dxProcessId == $dxProcessId )
end


rule "Action_Request : startDiagnosticGuideProcess Clean"
salience -100
when
    $s : SessionLocator( $sessionId: sessionId, mind == true )
    $a : Action( actionName == "startDiagnosticGuideProcess", $msgId : msgId,
                     $provId      : this["userId"],
                     $patientId   : this["patientId"],
                     $disease     : this["disease"]
                )
//    startDiagnosticGuideProcess( $provId, $patientId, $disease, $return ; )
    DiagnosticGuideProcess( disease == $disease, $dxProcessId : id, status == "Started" )
    $return := StartReturn( dxProcessId == $dxProcessId )
then
    System.out.println( "Returning from Dx Start Process " + $return  );
    retract( $a );
    ResponseContent.deliverResponse( $sessionId, $msgId, $return, null, true );
end




rule "Action_Request : startDiagnosticGuideProcess Failure"
salience -100
when
    $s : SessionLocator( $sessionId: sessionId, mind == true )
    $a : Action( actionName == "startDiagnosticGuideProcess", $msgId : msgId,
                     $provId      : this["userId"],
                     $patientId   : this["patientId"],
                     $disease     : this["disease"]
                )
    not  ResourceDescriptor( $decModelId  : name, description == $disease, categories contains "Decision" )
then
    retract( $a );
    ResponseContent.deliverResponse($sessionId, $msgId, null,
                                     new ExecutionFault( $msgId, "Unable to start a Dx Process, no decision model found" ),
                                     true );
end