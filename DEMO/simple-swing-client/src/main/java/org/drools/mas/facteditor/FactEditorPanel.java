/*******************************************************************************
 *
 * Copyright (C) 2012 by Cognitive Medical Systems, Inc (http://www.cognitivemedciine.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
 * use this file except in compliance with the License. You may obtain a copy of 
 * the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed 
 * under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR 
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 ******************************************************************************/
 
 /******************************************************************************
 * Socratic Grid contains components to which third party terms apply. To comply 
 * with these terms, the following notice is provided:
 *
 * TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
 * Copyright (c) 2008, Nationwide Health Information Network (NHIN) Connect. All 
 * rights reserved.
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions are met:
 * 
 * - Redistributions of source code must retain the above copyright notice, this 
 *   list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice, 
 *   this list of conditions and the following disclaimer in the documentation 
 *   and/or other materials provided with the distribution.
 * - Neither the name of the NHIN Connect Project nor the names of its 
 *   contributors may be used to endorse or promote products derived from this 
 *   software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
 * INTERRUPTION HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 * END OF TERMS AND CONDITIONS
 *
 ******************************************************************************/
package org.drools.mas.facteditor;

import org.drools.mas.facteditor.event.FactEditorPanelCloseEvent;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import org.drools.mas.event.Event;
import org.drools.mas.event.EventDispatcher;
import org.drools.mas.facteditor.event.FactModifiedEvent;
import org.drools.mas.facteditor.event.NewFactCreatedEvent;

/**
 *
 * @author esteban
 */
public class FactEditorPanel extends javax.swing.JPanel {

    private static final String LABEL_CREATE_FACT = "Create Fact";
    private static final String LABEL_MODIFY_FACT = "Modify Fact";
    
    private ClassesProvider classesProvider = new ClassesProvider();
    
    private Object editingObject;
    
    /**
     * Creates new form FactEditorPanel
     */
    public FactEditorPanel() {
        initComponents();
        fillPackagesCombobox();
        fillClassesCombobox(this.cboPackages.getSelectedItem().toString());
    }

    private void fillPackagesCombobox() {
        String[] packageNames = this.classesProvider.getPackages();

        ComboBoxModel model = new DefaultComboBoxModel(packageNames);
        this.cboPackages.setModel(model);
    }

    private void fillClassesCombobox(String packageName) {
        String[] classNames = this.classesProvider.getPackageClasses(packageName);

        ComboBoxModel model = new DefaultComboBoxModel(classNames);
        this.cboClasses.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cboPackages = new javax.swing.JComboBox();
        cboClasses = new javax.swing.JComboBox();
        btnNewInstance = new javax.swing.JButton();
        btnOk = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        objectEditorPanel = new org.drools.mas.facteditor.objecteditor.ObjectEditorPanel();

        cboPackages.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboPackages.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboPackagesActionPerformed(evt);
            }
        });

        cboClasses.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboClasses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboClassesActionPerformed(evt);
            }
        });

        btnNewInstance.setText("New Instance");
        btnNewInstance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewInstanceActionPerformed(evt);
            }
        });

        btnOk.setText("Create Fact");
        btnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(objectEditorPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(cboClasses, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(cboPackages, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnOk)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(btnNewInstance)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cboPackages, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cboClasses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnNewInstance)
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOk)
                    .addComponent(btnCancel)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cboClassesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboClassesActionPerformed
        
    }//GEN-LAST:event_cboClassesActionPerformed

    private void cboPackagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboPackagesActionPerformed
        this.fillClassesCombobox(this.cboPackages.getSelectedItem().toString());
    }//GEN-LAST:event_cboPackagesActionPerformed

    private void btnNewInstanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewInstanceActionPerformed
        try {
            Object pkg = this.cboPackages.getSelectedItem();
            Object clazz = this.cboClasses.getSelectedItem();
            
            if (pkg == null || clazz == null){
                return;
            }
            
            this.objectEditorPanel.showEmptyObject(pkg.toString()+"."+clazz.toString());
        } catch (Exception ex) {
            Logger.getLogger(FactEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnNewInstanceActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.objectEditorPanel.reset();
        
        EventDispatcher.getInstance().notifyEvent(new FactEditorPanelCloseEvent());
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkActionPerformed
        Event event = null;
        if (btnOk.getText().equals(LABEL_CREATE_FACT)){
            event = new NewFactCreatedEvent(this.objectEditorPanel.getCurrentObject());
        } else if (btnOk.getText().equals(LABEL_MODIFY_FACT)){
            event = new FactModifiedEvent(this.editingObject, this.objectEditorPanel.getCurrentObject());            
        }
        
        if (event != null){
            EventDispatcher.getInstance().notifyEvent(event);
        }else{
            throw new IllegalStateException("I don't know what to do!");
        }
        
    }//GEN-LAST:event_btnOkActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnNewInstance;
    private javax.swing.JButton btnOk;
    private javax.swing.JComboBox cboClasses;
    private javax.swing.JComboBox cboPackages;
    private javax.swing.JScrollPane jScrollPane1;
    private org.drools.mas.facteditor.objecteditor.ObjectEditorPanel objectEditorPanel;
    // End of variables declaration//GEN-END:variables

    public void reset() {
        this.editingObject = null;
        this.cboPackages.setEnabled(true);
        this.cboClasses.setEnabled(true);
        this.btnNewInstance.setEnabled(true);
        this.btnOk.setText(LABEL_CREATE_FACT);
        this.objectEditorPanel.reset();
    }
    
    public void editObject(Object object){
        this.reset();
        
        this.editingObject = object;
        
        String pkg = object.getClass().getPackage().getName();
        String clazz = object.getClass().getSimpleName();
        
        this.cboPackages.getModel().setSelectedItem(pkg);
        this.cboPackages.setEnabled(false);
        
        this.cboClasses.getModel().setSelectedItem(clazz);
        this.cboClasses.setEnabled(false);
        
        this.btnNewInstance.setEnabled(false);
        
        this.objectEditorPanel.setCurrentObject(object);
        
        this.btnOk.setText(LABEL_MODIFY_FACT);
    }
}
